# -*- coding:utf-8-unix -*-

[package]
name = "atcoder-rust-base"
version = "0.1.0"
edition = "2018"

[profile.release]
codegen-units = 1
incremental = false

[workspace]
exclude = ["./tools"]

[[bin]]
name = "main"
path = "src/main.rs"

[features]
jemalloc = ["jemalloc-ctl", "jemallocator"]
default = ["jemalloc"]

[dependencies]
# AtCoder 2019年言語アップデート以降に使用できるクレート

# 多バイト長整数、分数、複素数など
num = "=0.2.1"
num-bigint = "=0.2.5"
num-complex = "=0.2.4"
num-integer = "=0.1.42"
num-iter = "=0.1.40"
num-rational = "=0.2.3"
num-traits = "=0.2.11"
# `num-traits`用のderive macros
num-derive = "=0.3.0"

# 多次元配列
ndarray = "=0.13.0"

# 線形代数
nalgebra = "=0.19.0"
alga = "=0.9.2"

# libmのRust実装
libm = "=0.2.1"

# RNG 疑似乱数生成器 (randファミリー)
rand = { version = "=0.7.3", features = ["small_rng"] }
getrandom = "=0.1.14"
rand_chacha = "=0.2.1"
rand_core = "=0.5.1"
rand_hc = "=0.2.0"
rand_pcg = "=0.2.1"
# 乱数分布
rand_distr = "=0.2.2"

# グラフ
petgraph = "=0.5.0"

# 幾何
euclid = "=0.20.7"

# 素数
primal = "=0.2.3"
primal-check = "=0.2.3"
primal-estimate = "=0.2.1"
primal-sieve = "=0.2.9"

# 挿入順を保持するhash table
indexmap = "=1.3.0"

# 正規表現
regex = "=1.3.3"

# パーサーコンビネータ
nom = "=5.1.0"

# Aho–Corasick
aho-corasick = "=0.7.6"

# string similarity metrics
strsim = "=0.9.3"

# staticアイテムの遅延初期化
lazy_static = "=1.4.0"

# 浮動点小数の比較
approx = "=0.3.2"

# f64のOrd/Eq実装
ordered-float = "=1.0.2"

# 英数字などのASCII文字専用の文字列。文字にインデックスでアクセスしたり
# substringを簡単に作ったりできる
ascii = "=1.0.0"

# Permutation生成。C++のnext_permutationに相当する機能を提供
permutohedron = "=0.2.4"

# スライスの強化。C++のlower_bound, upper_boundに相当する機能を提供
superslice = "=1.0.0"

# イテレータの強化
itertools = "=0.8.2"
itertools-num = "=0.1.3"

# `&mut T`から`T`を『借りる』
take_mut = "=0.2.2"

# 1行で書ける`macro_rules`
defmac = "=0.2.1"

# パターンを`bool`式に
matches = "=0.1.8"

# `if`と`if let`を『まとめる』マクロ`if_chain!`
if_chain = "=1.0.0"

# `hashmap!`, `hashset!`, `btreemap!`, `btreeset!`
maplit = "=1.0.2"

# `std`のトレイトに対応するderive macro
derive_more = "=0.99.2"

# メソッド`new`を生やすderive macro
derive-new = "=0.5.8"

# 即席enum `Either<L, R>`
either = "=1.5.3"

# 標準ライブラリのVecやHashMapに対応する永続データ構造
# 永続データ構造は関数型言語によく見られるデータ構造で、要素を更新しても、そのデータ構造の
# 以前のバージョンにアクセスできる。（更新の度に差分が記録されていくイメージ）
im-rc = "=14.1.0"

# 可変長bit set。
fixedbitset = "=0.2.0"
bitset-fixed = "=0.1.0"

# union-find (a.k.a. disjoint-set)
union-find = "=0.3.2"

# 競技プログラミングの入出力サポート
proconio = { version = "=0.3.4", features = ["derive"] }
text_io = "=0.1.7"
whiteread = "=0.5.0"

# 剰余関連。普通の整数型などと同じ感覚で扱うだけで自動的にmodを取ってくれる
# 答えの整数をMで割った余りが要求される設問で便利
modtype = "=0.7.0"

# 高速なハッシュ関数
rustc-hash = "=1.0.1"

# 固定配列上のベクタ。ヒープ領域でなくスタック領域にアロケートされるので高速かもしれない
smallvec = "=1.1.0"

# 代替ヒープアロケータ。条件によってはシステムアロケータより速いことも
[target.'cfg(not(windows))'.dependencies]
jemallocator = { version = "=0.3.2", optional = true }
jemalloc-ctl = { version = "=0.3.3", optional = true }

[[test]]
name = "jemallocator"
path = "tests/test_jemallocator.rs"
required-features = ["jemalloc"]

# ---------------------------------------------------------------------

[dev-dependencies]
# cli_test_dir = "0.1"
